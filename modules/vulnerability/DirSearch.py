from concurrent.futures import ThreadPoolExecutor
from core.AttackerBase import AttackerBase
from utils.utilities import *
from difflib import SequenceMatcher
from thirdparty.sqlmap.DynamicContentParser import DynamicContentParser

class DirSearch(AttackerBase):
    def __init__(self,reporter):
        super().__init__(reporter)     
        self.payloads=read_file(os.path.join(Configs.ConstPayloadsPath,"all_dirsearch.txt"))
        self.results={"200":set(),"403":set(),"xxx":set()}
    def ratio(self,l1,l2):   # ratio of dissimilarity lower:similar 
        s_obj=SequenceMatcher(None,l1,l2)
        return s_obj.ratio()
    def requester_func(self,subdomain):
        subdomain=add_prefix(subdomain)
        dynamicParser=None
        resp=self.requester.send_get(subdomain)
        if(resp is None):
            return
        # analyse responses to differenciate from succesfull one
        tmp_resp1=self.requester.send_get(subdomain+"/random_name1.sql")
        tmp_resp2=self.requester.send_get(subdomain+"/random_name2.php")                               
        dynamicParser = DynamicContentParser(tmp_resp1.text,tmp_resp2.text)
        for payload in self.payloads:
            subdomain_payload=subdomain+"/"+payload
            resp=self.requester.send_get(subdomain_payload)
            if(payload in resp.url and resp.status_code==200 and dynamicParser.compareTo(resp.text)<0.9):
                self.results["200"].add(subdomain_payload)
            elif(payload in resp.url and resp.status_code==403 and dynamicParser.compareTo(resp.text)<0.9):
                self.results["403"].add(subdomain_payload)
            elif(resp.status_code!=404):
                self.results["xxx"].add(subdomain_payload)
    def start(self,domains):
        with ThreadPoolExecutor(Configs.THREADS) as threads:
            for i,subdomain in enumerate(domains):
                threads.submit(self.requester_func, subdomain)
        if(self.reporter!=None):
            self.reporter.createBlock("### DIRSEARCH 200")
            for x in self.results_200:
                self.reporter.addRow(x,"200")
        